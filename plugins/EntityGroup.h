/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   Group.h
 * Author: rlcancian
 *
 * Created on 12 de Junho de 2019, 19:00
 */

#ifndef ENTITYGROUP_H
#define ENTITYGROUP_H

#include "ModelElement.h"
#include "Entity.h"
#include <map>
#include <list>

/*
 The EnetityGroup represents a set of entities grouped togheter somehow. The entities in this group are kept into a internal queue. Usually one entity representing all grouped entities is generated by ModelComponents and the EntityGroup it represented is accessed through an attribute.
 */
class EntityGroup : public ModelElement {
public:
	EntityGroup(Model* model, std::string name = "");
	virtual ~EntityGroup();
public:
	virtual std::string show();
public:
	static PluginInformation* GetPluginInformation();
	static ModelElement* LoadInstance(Model* model, std::map<std::string, std::string>* fields);
public:
	void insertElement(Entity* element);
	void removeElement(Entity* element);
	unsigned int size();
	Entity* first();
public:
	void initBetweenReplications();
protected:
	virtual bool _loadInstance(std::map<std::string, std::string>* fields);
	virtual std::map<std::string, std::string>* _saveInstance();
	virtual bool _check(std::string* errorMessage);
	virtual void _createInternalElements();
private:
	void _initCStats();
private: //1::n
	List<Entity*>* _list = new List<Entity*>();
private: // child inner element
	StatisticsCollector* _cstatNumberInGroup;
};

#endif /* ENTITYGROUP_H */

